{"ast":null,"code":"var _jsxFileName = \"/Users/yimeng/Documents/fish/src/App.js\";\nimport React from 'react';\nimport ls from 'local-storage';\nimport LoginForm from \"./components/Login\";\nimport Fish from \"./components/Fish\";\nimport { gS } from \"./gSession.js\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      curUser: {\n        id: 0,\n        name: \"god\"\n      },\n      appState: {}\n    };\n  }\n\n  async componentDidMount() {\n    var curUser = ls.get('curUser');\n    var appState = ls.get('appState');\n\n    if (curUser) {\n      var u = {\n        id: curUser.id,\n        name: curUser.name\n      };\n      gS.setCreds(u);\n      await gS.restore(); // wait until we get the data back from the server\n\n      this.setState({\n        curUser: curUser\n      });\n    }\n\n    if (appState) {\n      this.setState({\n        appState: appState\n      });\n    }\n  }\n\n  updateState(key, data) {\n    this.setState({\n      [key]: data\n    });\n    ls.set(key, data);\n  } // remoteUpdateState = this.updateState.bind(this)\n\n\n  updateFishState(key, data) {\n    let aS = this.state.appState;\n    aS[key] = data;\n    this.setState({\n      appState: aS\n    });\n    ls.set('appState', aS);\n  }\n\n  renderLogin() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(LoginForm, {\n      updateAppState: this.updateState.bind(this),\n      appKey: \"curUser\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 3\n      }\n    }));\n  }\n\n  renderFish() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Fish, {\n      updateAppState: this.updateState.bind(this),\n      appKey: \"curUser\",\n      curUser: this.state.curUser,\n      updateFishState: this.updateFishState.bind(this),\n      appState: this.state.appState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 3\n      }\n    }));\n  }\n\n  render() {\n    if (!this.state.curUser || this.state.curUser.id < 0) {\n      return this.renderLogin();\n    } else {\n      return this.renderFish();\n    }\n  }\n\n}\n\nexport default App; // \t\t<LoginForm updateAppState=this.updateState.bind(this)/>\n//   verifyLogin(){\n// // Axios call to the database\n// uname=\"fish1\"\n//   }\n// <LoginForm updateAppState=this.updateState.bind(this) />\n// <LoginForm updateAppState=App.updateState.bind(App) /> we're in App component right now\n// We are invoking the component LoginForm\n//   updateAppState is a prop(erty) of LoginForm\n//  value of updateAppState is a function\n//     that function is this.updateState where this is App\n//  but we .bind(this) to that function\n//    this is equivalent to saying .bind(App)\n//  means that when updateAppState runs inside LoginForm\n//    then this.* inside updateAppState will be App (because\n//     this passed to bind is in the App component)","map":{"version":3,"sources":["/Users/yimeng/Documents/fish/src/App.js"],"names":["React","ls","LoginForm","Fish","gS","App","Component","state","curUser","id","name","appState","componentDidMount","get","u","setCreds","restore","setState","updateState","key","data","set","updateFishState","aS","renderLogin","bind","renderFish","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ls from 'local-storage'\n\nimport LoginForm from \"./components/Login\";\nimport Fish from \"./components/Fish\";\n\n\n\nimport { gS } from \"./gSession.js\"\n\nclass App extends React.Component {\n    state = {\n\tcurUser  : {\n\t\tid:0,\n\t\tname:\"god\"\n\t},\n\tappState : {},\n    }\n\n   async componentDidMount(){\n       var curUser = ls.get('curUser')\n       var appState = ls.get('appState')\n\n       if (curUser){\n\t   var u = {\n\t       id: curUser.id,\n\t       name : curUser.name\n\t   }\n\t   gS.setCreds(u)\n\t   await gS.restore() // wait until we get the data back from the server\n\t   this.setState({curUser : curUser})\n\t}\n\tif (appState){\n\t    this.setState({appState : appState})\n\t}\n    }\n\n    updateState(key, data){\n\tthis.setState({[key] :  data})\n\tls.set(key, data) \n    }\n    // remoteUpdateState = this.updateState.bind(this)\n\n    updateFishState(key, data){\n\tlet aS = this.state.appState;\n\taS[key] = data;\n\tthis.setState({appState : aS})\n\tls.set('appState', aS)\n    }\n    \n    \n\n    renderLogin(){\n\treturn (\n   \t\t<div>\n\t\t<LoginForm updateAppState = {this.updateState.bind(this)} appKey = {\"curUser\"} />\n\t\t</div>\n\t)\n    }\n\n    renderFish(){\n\treturn(\n\t    \t<div>\n\t\t\n\t\t<Fish updateAppState = {this.updateState.bind(this)}\n            appKey = {\"curUser\"}\n            curUser = {this.state.curUser}\n            updateFishState = {this.updateFishState.bind(this)}\n\t    appState = {this.state.appState}\n\t\t/>\n\t\t</div>\n\t)\n    }\n    \n   \n    render(){\n\tif (!this.state.curUser || this.state.curUser.id < 0  ){\n\t    return ( this.renderLogin() )\n        }\n\telse{\n\t    return( this.renderFish())\n\t}\t\n    }\n}\n\nexport default App;\n// \t\t<LoginForm updateAppState=this.updateState.bind(this)/>\n\n  //   verifyLogin(){\n\t// // Axios call to the database\n\t// uname=\"fish1\"\n  //   }\n\n\n// <LoginForm updateAppState=this.updateState.bind(this) />\n// <LoginForm updateAppState=App.updateState.bind(App) /> we're in App component right now\n\n// We are invoking the component LoginForm\n//   updateAppState is a prop(erty) of LoginForm\n\n//  value of updateAppState is a function\n//     that function is this.updateState where this is App\n\n//  but we .bind(this) to that function\n//    this is equivalent to saying .bind(App)\n\n//  means that when updateAppState runs inside LoginForm\n//    then this.* inside updateAppState will be App (because\n//     this passed to bind is in the App component)\n"]},"metadata":{},"sourceType":"module"}