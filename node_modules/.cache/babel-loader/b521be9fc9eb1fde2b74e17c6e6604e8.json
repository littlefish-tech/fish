{"ast":null,"code":"import _regeneratorRuntime from\"/Users/yimeng/Documents/fish/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/yimeng/Documents/fish/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/yimeng/Documents/fish/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yimeng/Documents/fish/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{bS}from'./BabyTalk';import ls from'local-storage';var GlobalSession=/*#__PURE__*/function(){function GlobalSession(){_classCallCheck(this,GlobalSession);this.Layout={};this.Creds={};this.Grids=[];this.AppData={};this.setDefault();this.lsKey='gSession';}_createClass(GlobalSession,[{key:\"getCreds\",value:function getCreds(){return this.Creds;}},{key:\"setCreds\",value:function setCreds(u){console.log(\"setting creds to \");console.log(u);var c={id:u.id,name:u.name};this.Creds=c;}},{key:\"getLayout\",value:function getLayout(){// we should call getLayout at Fish.js, user gets the layout\n// when login, first call the babyserver to look for the\n// layout detail at mongodb about that user\n// to get the fatsize and thin size, and \nreturn this.Layout;// then render the layout to the dashboord => how many grid\n// and also the layout name(but not rendering name)\n}},{key:\"setLayout\",value:function setLayout(l){// call at Fish.js, user may want to update fat/thin size\nthis.Layout=l;// when setLayout, we reSet the layout grid, or update size of\n// each grid\n// then call babyServer to save to mongodb\nthis.save();}},{key:\"getGrid\",value:function getGrid(gridID){// call at FlexGrid, we first call babyserver to get the saved\n// object from mongodb about that grid, will pass the\n// numCol/numRols, gridcontent detail(what component rendering\n// at which place) saved at db to the state\nreturn this.Grids[gridID];// rendering at the dashboard\n}},{key:\"setGrid\",value:function setGrid(gridID,gridObject){console.log(gridObject);// call at FlexGrid, when update the numsColmn/numsRows or the\n// user update the the gridCotnent Detail(changed any\n// component name at which key)\n// set S.Layout.Grids[gridId] = gridObject\t\t// then call babyServer save to mongoDB\nthis.Grids[gridID]=gridObject;this.save();}// component\n},{key:\"getAppData\",value:function getAppData(gridId,row,col){// call at GridItem, we call the baby server to find the\n//information saved at the gridID, row and col ->\n//S.AppData[gridId:row:col] (of type appHash) // set the state\n//of that component to what we get from db\nvar key=gridId+\":\"+row+\":\"+col;// render the setted component\nreturn this.AppData[key];}},{key:\"destroy\",value:function destroy(){this.Creds={};this.Layout={};this.Grids=[];this.AppData={};this.setDefault();var s=this.populate();ls.set(this.lsKey,s);// save a default session\n}},{key:\"setAppData\",value:function setAppData(gridId,row,col,aData){// call at GridItem, when update any information about that\n// component, we will call the babyserver talk to mongodb to\n// update S.AppData[gridId:row:col] = aData\nvar key=gridId+\":\"+row+\":\"+col;this.AppData[key]=aData;this.save();}},{key:\"save\",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var uData,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// write to database\nuData=this.populate();uData.userName=this.Creds.name;// make a bS post call\n_context.next=4;return bS.post(\"/saveSessionInfo\",uData);case 4:data=_context.sent;// save local as well\nls.set(this.lsKey,uData);case 6:case\"end\":return _context.stop();}}},_callee,this);}));function save(){return _save.apply(this,arguments);}return save;}()},{key:\"setDefault\",value:function setDefault(){this.Layout.name=\"ThinRightGrid\";this.Layout.conf={fatSize:8,thinSize:8};this.Grids[0]={\"numRows\":2,\"numCols\":2,\"gridContent\":{}};this.Grids[1]={\"numRows\":3,\"numCols\":1,\"gridContent\":{}};}},{key:\"setSession\",value:function setSession(session){this.Layout=session.Layout;this.Grids=session.Grids;this.AppData=session.AppData;}},{key:\"populate\",value:function populate(){var uData={Creds:this.Creds,Layout:this.Layout,Grids:this.Grids,AppData:this.AppData};return uData;}},{key:\"restore\",value:function(){var _restore=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var uData,lS,session;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// get from database\nuData={userName:this.Creds.name};if(uData.userName){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:lS=ls.get(this.lsKey);console.log(lS);if(!(lS&&lS.Creds&&lS.Creds.name==this.Creds.name)){_context2.next=10;break;}console.log(\"got local session back\");this.Creds=lS.Creds;this.setSession(lS);return _context2.abrupt(\"return\");case 10:console.log(\"Restoring from server for \"+this.Creds.name);_context2.next=13;return bS.post(\"/restoreSessionInfo\",uData);case 13:session=_context2.sent;if(!(session===null||session.Creds==null||!session.Creds.name==this.Creds.name)){_context2.next=18;break;}console.log(\"set default called\");this.setDefault();return _context2.abrupt(\"return\");case 18:this.setSession(session);console.log(\"Received new session  for \"+this.Creds.name);console.log(session);// save it locally\nuData=this.populate();uData.userName=this.Creds.name;console.log(\"saving session locally\");ls.set(this.lsKey,uData);case 25:case\"end\":return _context2.stop();}}},_callee2,this);}));function restore(){return _restore.apply(this,arguments);}return restore;}()}]);return GlobalSession;}();export var gS=new GlobalSession();","map":{"version":3,"sources":["/Users/yimeng/Documents/fish/src/gSession.js"],"names":["bS","ls","GlobalSession","Layout","Creds","Grids","AppData","setDefault","lsKey","u","console","log","c","id","name","l","save","gridID","gridObject","gridId","row","col","key","s","populate","set","aData","uData","userName","post","data","conf","fatSize","thinSize","session","lS","get","setSession","gS"],"mappings":"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","sourcesContent":["import {bS} from './BabyTalk'\nimport ls from 'local-storage'\n\nclass GlobalSession {\n\n    constructor(){\n\tthis.Layout = {};\n\tthis.Creds = {};\n\tthis.Grids = [];\n\tthis.AppData = {};\n\n\tthis.setDefault()\n\tthis.lsKey = 'gSession'\n\t\n    }\n\n\tgetCreds(){\n\t\treturn this.Creds\n\t}\n    setCreds(u){\n\tconsole.log(\"setting creds to \")\n\tconsole.log(u)\n\tvar c = {\n\t    id : u.id,\n\t    name : u.name\n\t}\n\tthis.Creds = c\n    }\n    \n    getLayout(){\n\t// we should call getLayout at Fish.js, user gets the layout\n\t// when login, first call the babyserver to look for the\n\t// layout detail at mongodb about that user\n\t// to get the fatsize and thin size, and \n\n\treturn this.Layout\n\t// then render the layout to the dashboord => how many grid\n\t// and also the layout name(but not rendering name)\n    }\n\n    setLayout(l){\n\t// call at Fish.js, user may want to update fat/thin size\n\tthis.Layout = l\n\n\t// when setLayout, we reSet the layout grid, or update size of\n\t// each grid\n\n\t// then call babyServer to save to mongodb\n\tthis.save()\n    }\n\n    getGrid(gridID){\n\t// call at FlexGrid, we first call babyserver to get the saved\n\t// object from mongodb about that grid, will pass the\n\t// numCol/numRols, gridcontent detail(what component rendering\n\t// at which place) saved at db to the state\n\n\treturn this.Grids[gridID]\t// rendering at the dashboard\n    }\n\n    setGrid(gridID, gridObject){\n\t\tconsole.log(gridObject)\n\n\t// call at FlexGrid, when update the numsColmn/numsRows or the\n\t// user update the the gridCotnent Detail(changed any\n\t// component name at which key)\n\n\t// set S.Layout.Grids[gridId] = gridObject\t\t// then call babyServer save to mongoDB\n\tthis.Grids[gridID] = gridObject;\n\tthis.save()\n    }\n\n   // component\n    getAppData(gridId, row, col){\n\t// call at GridItem, we call the baby server to find the\n\t//information saved at the gridID, row and col ->\n\t//S.AppData[gridId:row:col] (of type appHash) // set the state\n\t//of that component to what we get from db\n\n\tvar key = gridId + \":\" + row + \":\" + col\n\t// render the setted component\n\treturn this.AppData[key]\n    }\n\t\n\tdestroy(){\n\t    this.Creds = {}\n\t    this.Layout = {}\n\t    this.Grids = []\n\t    this.AppData = {}\n\t    this.setDefault()\n\n\t    var s = this.populate()\n\t    ls.set( this.lsKey, s) // save a default session\n\t}\n\n    setAppData(gridId, row, col, aData){\n\n\t// call at GridItem, when update any information about that\n\t// component, we will call the babyserver talk to mongodb to\n\n\t// update S.AppData[gridId:row:col] = aData\n\n\tvar key = gridId + \":\" + row + \":\" + col\n\tthis.AppData[key] = aData\n\t\n\tthis.save()\n    }\n\t\n    async save(){\n\t// write to database\n\tvar uData = this.populate()\n\tuData.userName = this.Creds.name\n\n\t// make a bS post call\n\tvar data = await bS.post(\"/saveSessionInfo\", uData)\n\n\t// save local as well\n\tls.set(this.lsKey,  uData)\n    }\n\n\n    setDefault(){\n\t\n\tthis.Layout.name = \"ThinRightGrid\"\n\tthis.Layout.conf = {\n\t     fatSize: 8,\n\t     thinSize: 8 \n\t};\n\t\n\t this.Grids[0] = {\n\t     \"numRows\" : 2,\n\t     \"numCols\" : 2,\n\t     \"gridContent\" : {}\n\t }\n\n\t this.Grids[1] = {\n\t     \"numRows\" : 3,\n\t     \"numCols\" : 1,\n\t     \"gridContent\" : {}\n\t }\n    }\n\n    setSession(session){\n\tthis.Layout = session.Layout\n\tthis.Grids = session.Grids\n\tthis.AppData = session.AppData\n    }\n\n    populate(){\n\tvar uData = {\n\t    Creds : this.Creds,\n\t    Layout : this.Layout,\n\t    Grids  : this.Grids,\n\t    AppData : this.AppData\n\t}\n\treturn uData\n    }\n    \n\n    async restore(){\n\t// get from database\n\tvar uData = {\n\t    userName : this.Creds.name\n\t}\n\n\tif (!uData.userName){\n\t    return;\n\t}\n\n\tvar lS  = ls.get(this.lsKey)\n\n\tconsole.log(lS)\n\n\tif ((lS) && (lS.Creds) && (lS.Creds.name == this.Creds.name)){\n\t    console.log(\"got local session back\")\n\t    this.Creds = lS.Creds\n\t    this.setSession(lS)\n\t    return\n\t}\n\n\tconsole.log(\"Restoring from server for \" + this.Creds.name)\n\tvar session = await bS.post(\"/restoreSessionInfo\", uData)\n\tif (session === null || session.Creds == null || !session.Creds.name == this.Creds.name){\n\t    console.log(\"set default called\")\n\t    this.setDefault()\n\t    return\n\t}\n\tthis.setSession(session)\n\n\tconsole.log(\"Received new session  for \" + this.Creds.name)\n\tconsole.log(session)\n\n\t// save it locally\n\tvar uData = this.populate()\n\tuData.userName = this.Creds.name\n\n\tconsole.log(\"saving session locally\")\n\tls.set(this.lsKey,  uData)\n\n    }\n    \n}\n\nexport const gS = new GlobalSession()\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}