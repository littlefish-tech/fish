{"ast":null,"code":"var _jsxFileName = \"/Users/yimeng/Documents/fish/src/components/Poetry.js\";\nimport React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Header, Loader, List, Divider } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass Poetry extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"Poetry\",\n      titleColor: \"red\",\n      poetryData: null,\n      loadPoetry: true,\n      poetryTitle: null,\n      refreshSeq: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.setTitle(this.state.title, this.state.titleColor);\n    this.props.noMenu(false);\n    this.getPoetry();\n    this.props.setError(false);\n    this.props.setRefresh(\"grey\", false);\n  }\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.triggerRefresh < this.props.triggerRefresh) {\n      this.refreshPoetry();\n    }\n  }\n\n  updatePoetry(data) {\n    console.log(\"the poetry data is\" + data);\n    this.setState({\n      poetryData: data\n    });\n    this.setState({\n      loadPoetry: false\n    });\n    let pTitle = this.state.poetryData.title;\n    this.setState({\n      poetryTitle: pTitle\n    });\n    this.props.setTitle(pTitle, this.state.titleColor);\n  }\n\n  getPoetry() {\n    let pURL = \"https://poetrydb.org/random,linecount/1;5\"; //https://poetrydb.org/random`\n\n    axios.get(pURL).then(res => {\n      this.updatePoetry(res.data[0]);\n    });\n  }\n\n  refreshPoetry() {\n    this.props.setRefresh(\"red\", true);\n    this.updateTitleColor(\"orange\");\n    this.setState({\n      loadPoetry: true\n    });\n    this.getPoetry();\n\n    if (this.state.poetryData != null) {\n      this.setState({\n        loadPoetry: false\n      });\n      this.props.setError(false);\n    }\n\n    setTimeout(this.resetRefreshColor.bind(this), 3000);\n  }\n\n  resetRefreshColor() {\n    this.updateTitleColor(this.state.titleColor);\n    this.props.setRefresh(\"grey\", false);\n  }\n\n  updateTitleColor(c) {\n    this.props.setTitle(this.state.poetryTitle, c);\n  }\n\n  render() {\n    let scrollStyle = {\n      width: \"100%\",\n      height: \"300px\",\n      overflowY: \"auto\",\n      overflowX: \"auto\" // the image is from \"pexels.com\"\n      //backgroundImage:\"url('https://images.pexels.com/photos/907485/pexels-photo-907485.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260')\"\n\n    };\n    let poetryInfo = this.state.poetryData;\n\n    if (!this.state.loadPoetry) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        style: scrollStyle,\n        text: true,\n        textAlign: \"left\",\n        fluid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Divider, {\n        hidden: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Header, {\n        as: \"h3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, \" Author: \", poetryInfo.author), /*#__PURE__*/React.createElement(List, {\n        style: scrollStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }\n      }, poetryInfo.lines.map((line, index) => /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 90\n        }\n      }, line)))));\n    } else {\n      return /*#__PURE__*/React.createElement(Loader, {\n        active: this.state.loadPoetry,\n        inline: \"centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nexport default Poetry;","map":{"version":3,"sources":["/Users/yimeng/Documents/fish/src/components/Poetry.js"],"names":["React","Container","Header","Loader","List","Divider","axios","Poetry","Component","state","title","titleColor","poetryData","loadPoetry","poetryTitle","refreshSeq","componentDidMount","props","setTitle","noMenu","getPoetry","setError","setRefresh","componentDidUpdate","oldProps","triggerRefresh","refreshPoetry","updatePoetry","data","console","log","setState","pTitle","pURL","get","then","res","updateTitleColor","setTimeout","resetRefreshColor","bind","c","render","scrollStyle","width","height","overflowY","overflowX","poetryInfo","author","lines","map","line","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kCAAP;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,IAApC,EAA0CC,OAA1C,QAAyD,mBAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCC,KADiC,GAC3B;AACFC,MAAAA,KAAK,EAAE,QADL;AAEFC,MAAAA,UAAU,EAAE,KAFV;AAGFC,MAAAA,UAAU,EAAE,IAHV;AAIFC,MAAAA,UAAU,EAAE,IAJV;AAKFC,MAAAA,WAAW,EAAE,IALX;AAMFC,MAAAA,UAAU,EAAG;AANX,KAD2B;AAAA;;AAUjCC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWC,QAAX,CAAoB,KAAKT,KAAL,CAAWC,KAA/B,EAAsC,KAAKD,KAAL,CAAWE,UAAjD;AACH,SAAKM,KAAL,CAAWE,MAAX,CAAkB,KAAlB;AACG,SAAKC,SAAL;AACA,SAAKH,KAAL,CAAWI,QAAX,CAAoB,KAApB;AACH,SAAKJ,KAAL,CAAWK,UAAX,CAAsB,MAAtB,EAA8B,KAA9B;AACA;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAU;AACxB,QAAIA,QAAQ,CAACC,cAAT,GAA0B,KAAKR,KAAL,CAAWQ,cAAzC,EAAwD;AACpD,WAAKC,aAAL;AACH;AACA;;AAELC,EAAAA,YAAY,CAACC,IAAD,EAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,IAAnC;AACA,SAAKG,QAAL,CAAc;AAACnB,MAAAA,UAAU,EAAEgB;AAAb,KAAd;AACA,SAAKG,QAAL,CAAc;AAAClB,MAAAA,UAAU,EAAE;AAAb,KAAd;AACA,QAAImB,MAAM,GAAG,KAAKvB,KAAL,CAAWG,UAAX,CAAsBF,KAAnC;AACA,SAAKqB,QAAL,CAAc;AAACjB,MAAAA,WAAW,EAAEkB;AAAd,KAAd;AACA,SAAKf,KAAL,CAAWC,QAAX,CAAoBc,MAApB,EAA4B,KAAKvB,KAAL,CAAWE,UAAvC;AACH;;AAEDS,EAAAA,SAAS,GAAE;AACX,QAAIa,IAAI,GAAG,2CAAX,CADW,CAEd;;AACO3B,IAAAA,KAAK,CAAC4B,GAAN,CAAUD,IAAV,EACKE,IADL,CACUC,GAAG,IAAI;AACT,WAAKT,YAAL,CAAkBS,GAAG,CAACR,IAAJ,CAAS,CAAT,CAAlB;AACH,KAHL;AAIH;;AAEDF,EAAAA,aAAa,GAAE;AACX,SAAKT,KAAL,CAAWK,UAAX,CAAsB,KAAtB,EAA6B,IAA7B;AACA,SAAKe,gBAAL,CAAsB,QAAtB;AACA,SAAKN,QAAL,CAAc;AAAClB,MAAAA,UAAU,EAAE;AAAb,KAAd;AACA,SAAKO,SAAL;;AACA,QAAI,KAAKX,KAAL,CAAWG,UAAX,IAAyB,IAA7B,EAAkC;AAC9B,WAAKmB,QAAL,CAAc;AAAClB,QAAAA,UAAU,EAAE;AAAb,OAAd;AACA,WAAKI,KAAL,CAAWI,QAAX,CAAoB,KAApB;AAEH;;AACDiB,IAAAA,UAAU,CAAC,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAD,EAAoC,IAApC,CAAV;AACH;;AAEDD,EAAAA,iBAAiB,GAAE;AACf,SAAKF,gBAAL,CAAsB,KAAK5B,KAAL,CAAWE,UAAjC;AACA,SAAKM,KAAL,CAAWK,UAAX,CAAsB,MAAtB,EAA8B,KAA9B;AACH;;AACDe,EAAAA,gBAAgB,CAACI,CAAD,EAAG;AACf,SAAKxB,KAAL,CAAWC,QAAX,CAAoB,KAAKT,KAAL,CAAWK,WAA/B,EAA4C2B,CAA5C;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIC,WAAW,GAAC;AACZC,MAAAA,KAAK,EAAE,MADK;AAEZC,MAAAA,MAAM,EAAE,OAFI;AAGZC,MAAAA,SAAS,EAAE,MAHC;AAIZC,MAAAA,SAAS,EAAE,MAJC,CAKZ;AACA;;AANY,KAAhB;AAQA,QAAIC,UAAU,GAAG,KAAKvC,KAAL,CAAWG,UAA5B;;AACA,QAAI,CAAC,KAAKH,KAAL,CAAWI,UAAhB,EAA2B;AACvB,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE8B,WAAlB;AAA+B,QAAA,IAAI,MAAnC;AAAoC,QAAA,SAAS,EAAC,MAA9C;AAAqD,QAAA,KAAK,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAS,QAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA0BK,UAAU,CAACC,MAArC,CAFJ,eAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BK,UAAU,CAACE,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,kBAAiB;AAAG,QAAA,GAAG,EAAEA,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgBD,IAAhB,CAAtC,CAA3B,CAHJ,CADJ,CADJ;AASH,KAVD,MAWK;AACF,0BAAQ,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAE,KAAK3C,KAAL,CAAWI,UAA3B;AAAuC,QAAA,MAAM,EAAC,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACF;AAEJ;;AAxFgC;;AA2FrC,eAAeN,MAAf","sourcesContent":["import React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container, Header, Loader, List, Divider } from 'semantic-ui-react'\nimport axios from 'axios'\n\nclass Poetry extends React.Component {\n    state={\n        title: \"Poetry\",\n        titleColor: \"red\",\n        poetryData: null,\n        loadPoetry: true, \n        poetryTitle: null,\n        refreshSeq : 0,\n    }\n\n    componentDidMount(){\n        this.props.setTitle(this.state.title, this.state.titleColor)\n\t    this.props.noMenu(false)\n        this.getPoetry()\n        this.props.setError(false)\n\t    this.props.setRefresh(\"grey\", false)\n    }\n\n    componentDidUpdate(oldProps){\n        if (oldProps.triggerRefresh < this.props.triggerRefresh){\n            this.refreshPoetry()\n        }\n        }\n\n    updatePoetry(data){\n        console.log(\"the poetry data is\" + data)\n        this.setState({poetryData: data})\n        this.setState({loadPoetry: false})\n        let pTitle = this.state.poetryData.title\n        this.setState({poetryTitle: pTitle})\n        this.props.setTitle(pTitle, this.state.titleColor)\n    }\n\n    getPoetry(){\n    let pURL = \"https://poetrydb.org/random,linecount/1;5\"\n\t//https://poetrydb.org/random`\n        axios.get(pURL)\n            .then(res => {\n                this.updatePoetry(res.data[0])\n            })\n    }\n\n    refreshPoetry(){\n        this.props.setRefresh(\"red\", true)\n        this.updateTitleColor(\"orange\")\n        this.setState({loadPoetry: true})\n        this.getPoetry()\n        if (this.state.poetryData != null){\n            this.setState({loadPoetry: false})\n            this.props.setError(false)\n\n        }\n        setTimeout(this.resetRefreshColor.bind(this), 3000)\n    }\n\n    resetRefreshColor(){\n        this.updateTitleColor(this.state.titleColor)\n        this.props.setRefresh(\"grey\", false)\n    }\n    updateTitleColor(c){\n        this.props.setTitle(this.state.poetryTitle, c)\n    }\n\n    render(){\n        let scrollStyle={\n            width: \"100%\",\n            height: \"300px\",\n            overflowY: \"auto\",\n            overflowX: \"auto\",\n            // the image is from \"pexels.com\"\n            //backgroundImage:\"url('https://images.pexels.com/photos/907485/pexels-photo-907485.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260')\"\n        }\n        let poetryInfo = this.state.poetryData\n        if (!this.state.loadPoetry){\n            return (\n                <div>\n                    <Container style={scrollStyle} text textAlign='left' fluid >\n                        <Divider hidden/>\n                        <Header as=\"h3\"> Author: {poetryInfo.author}</Header>\n                        <List style={scrollStyle}>{poetryInfo.lines.map((line, index) => <p key={index}>{line}</p>)}</List>\n                    </Container>\n                </div>\n            )\n        }\n        else {\n           return (<Loader active={this.state.loadPoetry} inline=\"centered\" />) \n        }\n\n    } \n\n}\nexport default Poetry;\n"]},"metadata":{},"sourceType":"module"}