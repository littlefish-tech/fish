{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees, adjustDimsForRotation, reduceRotation } from \"../rotations\";\nimport { drawImage, rotateInPlace } from \"../operations\";\nimport { PDFStream, PDFAcroPushButton } from \"../../core\";\nimport { assertIs, assertOrUndefined, addRandomSuffix } from \"../../utils\";\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\n\nvar PDFButton =\n/** @class */\nfunction (_super) {\n  __extends(PDFButton, _super);\n\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n\n    assertIs(acroPushButton, 'acroButton', [[PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  } // NOTE: This doesn't handle image borders.\n  // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n  //       ratio) to fit perfectly within the widget's rectangle. This method\n  //       does not currently do that. Should there be an option for that?\n\n  /**\n   * Display an image inside the bounds of this button's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const button = form.getButton('some.button.field')\n   * button.setImage(pngImage)\n   * ```\n   * This will update the appearances streams for each of this button's widgets.\n   * @param image The image that should be displayed.\n   */\n\n\n  PDFButton.prototype.setImage = function (image) {\n    var _a;\n\n    var _b; // Create appearance stream with image, ignoring caption property\n\n\n    var context = this.acroField.dict.context;\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx]; ////////////\n\n      var rectangle = widget.getRectangle();\n      var ap = widget.getAppearanceCharacteristics();\n      var bs = widget.getBorderStyle();\n      var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 1;\n      var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n      var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n        rotation: rotation\n      }));\n      var adj = adjustDimsForRotation(rectangle, rotation);\n      var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n      var drawingArea = {\n        x: 0 + borderWidth,\n        y: 0 + borderWidth,\n        width: adj.width - borderWidth * 2,\n        height: adj.height - borderWidth * 2\n      }; // Support borders on images and maybe other properties\n\n      var options = {\n        x: drawingArea.x + (drawingArea.width / 2 - imageDims.width / 2),\n        y: drawingArea.y + (drawingArea.height / 2 - imageDims.height / 2),\n        width: imageDims.width,\n        height: imageDims.height,\n        //\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      };\n      var imageName = addRandomSuffix('Image', 10);\n\n      var appearance = __spreadArrays(rotate, drawImage(imageName, options)); ////////////\n\n\n      var Resources = {\n        XObject: (_a = {}, _a[imageName] = image.ref, _a)\n      };\n      var stream = context.formXObject(appearance, {\n        Resources: Resources,\n        BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n        Matrix: context.obj([1, 0, 0, 1, 0, 0])\n      });\n      var streamRef = context.register(stream);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n\n    this.markAsClean();\n  };\n  /**\n   * Show this button on the specified page with the given text. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('some.button.field')\n   *\n   * button.addToPage('Do Stuff', page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this button field.\n   * @param text The text to be displayed for this button widget.\n   * @param page The page to which this button widget should be added.\n   * @param options The options to be used when adding this button widget.\n   */\n\n\n  PDFButton.prototype.addToPage = function ( // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options); // Create a widget for this button\n\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n      caption: text\n    });\n    var widgetRef = this.doc.context.register(widget.dict); // Add widget to this field\n\n    this.acroField.addWidget(widgetRef); // Set appearance streams for widget\n\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font); // Add widget to the given page\n\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this button has been marked as dirty, or if any of this\n   * button's widgets do not have an appearance stream. For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this button needs an appearance update.\n   */\n\n\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the default appearance provider for buttons. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n\n\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for buttons will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return {\n   *     normal: drawButton(...),\n   *     down: drawButton(...),\n   *   }\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n\n\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getButton]] method, which will create an\n   * > instance of [[PDFButton]] for you.\n   *\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n   *\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n   * @param ref The unique reference for this button.\n   * @param doc The document to which this button will belong.\n   */\n\n\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n\n  return PDFButton;\n}(PDFField);\n\nexport default PDFButton;","map":{"version":3,"sources":["../../../src/api/form/PDFButton.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider, } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees, adjustDimsForRotation, reduceRotation, } from \"../rotations\";\nimport { drawImage, rotateInPlace } from \"../operations\";\nimport { PDFStream, PDFAcroPushButton, } from \"../../core\";\nimport { assertIs, assertOrUndefined, addRandomSuffix } from \"../../utils\";\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nvar PDFButton = /** @class */ (function (_super) {\n    __extends(PDFButton, _super);\n    function PDFButton(acroPushButton, ref, doc) {\n        var _this = _super.call(this, acroPushButton, ref, doc) || this;\n        assertIs(acroPushButton, 'acroButton', [\n            [PDFAcroPushButton, 'PDFAcroPushButton'],\n        ]);\n        _this.acroField = acroPushButton;\n        return _this;\n    }\n    // NOTE: This doesn't handle image borders.\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n    //       ratio) to fit perfectly within the widget's rectangle. This method\n    //       does not currently do that. Should there be an option for that?\n    /**\n     * Display an image inside the bounds of this button's widgets. For example:\n     * ```js\n     * const pngImage = await pdfDoc.embedPng(...)\n     * const button = form.getButton('some.button.field')\n     * button.setImage(pngImage)\n     * ```\n     * This will update the appearances streams for each of this button's widgets.\n     * @param image The image that should be displayed.\n     */\n    PDFButton.prototype.setImage = function (image) {\n        var _a;\n        var _b;\n        // Create appearance stream with image, ignoring caption property\n        var context = this.acroField.dict.context;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            ////////////\n            var rectangle = widget.getRectangle();\n            var ap = widget.getAppearanceCharacteristics();\n            var bs = widget.getBorderStyle();\n            var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 1;\n            var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n            var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n            var adj = adjustDimsForRotation(rectangle, rotation);\n            var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n            var drawingArea = {\n                x: 0 + borderWidth,\n                y: 0 + borderWidth,\n                width: adj.width - borderWidth * 2,\n                height: adj.height - borderWidth * 2,\n            };\n            // Support borders on images and maybe other properties\n            var options = {\n                x: drawingArea.x + (drawingArea.width / 2 - imageDims.width / 2),\n                y: drawingArea.y + (drawingArea.height / 2 - imageDims.height / 2),\n                width: imageDims.width,\n                height: imageDims.height,\n                //\n                rotate: degrees(0),\n                xSkew: degrees(0),\n                ySkew: degrees(0),\n            };\n            var imageName = addRandomSuffix('Image', 10);\n            var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n            ////////////\n            var Resources = { XObject: (_a = {}, _a[imageName] = image.ref, _a) };\n            var stream = context.formXObject(appearance, {\n                Resources: Resources,\n                BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n                Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n            });\n            var streamRef = context.register(stream);\n            this.updateWidgetAppearances(widget, { normal: streamRef });\n        }\n        this.markAsClean();\n    };\n    /**\n     * Show this button on the specified page with the given text. For example:\n     * ```js\n     * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const button = form.createButton('some.button.field')\n     *\n     * button.addToPage('Do Stuff', page, {\n     *   x: 50,\n     *   y: 75,\n     *   width: 200,\n     *   height: 100,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     *   font: ubuntuFont,\n     * })\n     * ```\n     * This will create a new widget for this button field.\n     * @param text The text to be displayed for this button widget.\n     * @param page The page to which this button widget should be added.\n     * @param options The options to be used when adding this button widget.\n     */\n    PDFButton.prototype.addToPage = function (\n    // TODO: This needs to be optional, e.g. for image buttons\n    text, page, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        assertOrUndefined(text, 'text', ['string']);\n        assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        // Create a widget for this button\n        var widget = this.createWidget({\n            x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n            y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n            width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n            height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n            textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n            backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n            borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n            borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n            rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n            caption: text,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        this.acroField.addWidget(widgetRef);\n        // Set appearance streams for widget\n        var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n        this.updateWidgetAppearance(widget, font);\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if this button has been marked as dirty, or if any of this\n     * button's widgets do not have an appearance stream. For example:\n     * ```js\n     * const button = form.getButton('some.button.field')\n     * if (button.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this button needs an appearance update.\n     */\n    PDFButton.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        if (this.isDirty())\n            return true;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n            if (!hasAppearances)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this button's widgets using\n     * the default appearance provider for buttons. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const button = form.getButton('some.button.field')\n     * button.defaultUpdateAppearances(helvetica)\n     * ```\n     * @param font The font to be used for creating the appearance streams.\n     */\n    PDFButton.prototype.defaultUpdateAppearances = function (font) {\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        this.updateAppearances(font);\n    };\n    /**\n     * Update the appearance streams for each of this button's widgets using\n     * the given appearance provider. If no `provider` is passed, the default\n     * appearance provider for buttons will be used. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const button = form.getButton('some.button.field')\n     * button.updateAppearances(helvetica, (field, widget, font) => {\n     *   ...\n     *   return {\n     *     normal: drawButton(...),\n     *     down: drawButton(...),\n     *   }\n     * })\n     * ```\n     * @param font The font to be used for creating the appearance streams.\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFButton.prototype.updateAppearances = function (font, provider) {\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            this.updateWidgetAppearance(widget, font, provider);\n        }\n    };\n    PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget, font));\n        this.updateWidgetAppearanceWithFont(widget, font, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getButton]] method, which will create an\n     * > instance of [[PDFButton]] for you.\n     *\n     * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n     *\n     * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n     * @param ref The unique reference for this button.\n     * @param doc The document to which this button will belong.\n     */\n    PDFButton.of = function (acroPushButton, ref, doc) { return new PDFButton(acroPushButton, ref, doc); };\n    return PDFButton;\n}(PDFField));\nexport default PDFButton;\n//# sourceMappingURL=PDFButton.js.map"]},"metadata":{},"sourceType":"module"}