{"ast":null,"code":"import { bS } from './BabyTalk';\nimport ls from 'local-storage';\n\nclass GlobalSession {\n  constructor() {\n    this.Layout = {};\n    this.Creds = {};\n    this.Grids = [];\n    this.AppData = {};\n    this.setDefault();\n    this.lsKey = 'gSession';\n  }\n\n  getCreds() {\n    return this.Creds;\n  }\n\n  setCreds(u) {\n    console.log(\"setting creds to \");\n    console.log(u);\n    var c = {\n      id: u.id,\n      name: u.name\n    };\n    this.Creds = c;\n  }\n\n  getLayout() {\n    // we should call getLayout at Fish.js, user gets the layout\n    // when login, first call the babyserver to look for the\n    // layout detail at mongodb about that user\n    // to get the fatsize and thin size, and \n    return this.Layout; // then render the layout to the dashboord => how many grid\n    // and also the layout name(but not rendering name)\n  }\n\n  setLayout(l) {\n    // call at Fish.js, user may want to update fat/thin size\n    this.Layout = l; // when setLayout, we reSet the layout grid, or update size of\n    // each grid\n    // then call babyServer to save to mongodb\n\n    this.save();\n  }\n\n  getGrid(gridID) {\n    // call at FlexGrid, we first call babyserver to get the saved\n    // object from mongodb about that grid, will pass the\n    // numCol/numRols, gridcontent detail(what component rendering\n    // at which place) saved at db to the state\n    return this.Grids[gridID]; // rendering at the dashboard\n  }\n\n  setGrid(gridID, gridObject) {\n    console.log(gridObject); // call at FlexGrid, when update the numsColmn/numsRows or the\n    // user update the the gridCotnent Detail(changed any\n    // component name at which key)\n    // set S.Layout.Grids[gridId] = gridObject\t\t// then call babyServer save to mongoDB\n\n    this.Grids[gridID] = gridObject;\n    this.save();\n  } // component\n\n\n  getAppData(gridId, row, col) {\n    // call at GridItem, we call the baby server to find the\n    //information saved at the gridID, row and col ->\n    //S.AppData[gridId:row:col] (of type appHash) // set the state\n    //of that component to what we get from db\n    var key = gridId + \":\" + row + \":\" + col; // render the setted component\n\n    return this.AppData[key];\n  }\n\n  destroy() {\n    this.Creds = {};\n    this.Layout = {};\n    this.Grids = [];\n    this.AppData = {};\n    this.setDefault();\n    var s = this.populate();\n    ls.set(this.lsKey, s); // save a default session\n  }\n\n  setAppData(gridId, row, col, aData) {\n    // call at GridItem, when update any information about that\n    // component, we will call the babyserver talk to mongodb to\n    // update S.AppData[gridId:row:col] = aData\n    var key = gridId + \":\" + row + \":\" + col;\n    this.AppData[key] = aData;\n    this.save();\n  }\n\n  async save() {\n    // write to database\n    var uData = this.populate();\n    uData.userName = this.Creds.name; // make a bS post call\n\n    var data = await bS.post(\"/saveSessionInfo\", uData); // save local as well\n\n    ls.set(this.lsKey, uData);\n  }\n\n  setDefault() {\n    this.Layout.name = \"ThinRightGrid\";\n    this.Layout.conf = {\n      fatSize: 8,\n      thinSize: 8\n    };\n    this.Grids[0] = {\n      \"numRows\": 2,\n      \"numCols\": 2,\n      \"gridContent\": {}\n    };\n    this.Grids[1] = {\n      \"numRows\": 3,\n      \"numCols\": 1,\n      \"gridContent\": {}\n    };\n  }\n\n  setSession(session) {\n    this.Layout = session.Layout;\n    this.Grids = session.Grids;\n    this.AppData = session.AppData;\n  }\n\n  populate() {\n    var uData = {\n      Creds: this.Creds,\n      Layout: this.Layout,\n      Grids: this.Grids,\n      AppData: this.AppData\n    };\n    return uData;\n  }\n\n  async restore() {\n    // get from database\n    var uData = {\n      userName: this.Creds.name\n    };\n\n    if (!uData.userName) {\n      return;\n    }\n\n    var lS = ls.get(this.lsKey);\n    console.log(lS);\n\n    if (lS && lS.Creds && lS.Creds.name == this.Creds.name) {\n      console.log(\"got local session back\");\n      this.Creds = lS.Creds;\n      this.setSession(lS);\n      return;\n    }\n\n    console.log(\"Restoring from server for \" + this.Creds.name);\n    var session = await bS.post(\"/restoreSessionInfo\", uData);\n\n    if (session === null || session.Creds == null || !session.Creds.name == this.Creds.name) {\n      console.log(\"set default called\");\n      this.setDefault();\n      return;\n    }\n\n    this.setSession(session);\n    console.log(\"Received new session  for \" + this.Creds.name);\n    console.log(session); // save it locally\n\n    var uData = this.populate();\n    uData.userName = this.Creds.name;\n    console.log(\"saving session locally\");\n    ls.set(this.lsKey, uData);\n  }\n\n}\n\nexport const gS = new GlobalSession();","map":{"version":3,"sources":["/Users/yimeng/Documents/fish/src/gSession.js"],"names":["bS","ls","GlobalSession","constructor","Layout","Creds","Grids","AppData","setDefault","lsKey","getCreds","setCreds","u","console","log","c","id","name","getLayout","setLayout","l","save","getGrid","gridID","setGrid","gridObject","getAppData","gridId","row","col","key","destroy","s","populate","set","setAppData","aData","uData","userName","data","post","conf","fatSize","thinSize","setSession","session","restore","lS","get","gS"],"mappings":"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","sourcesContent":["import {bS} from './BabyTalk'\nimport ls from 'local-storage'\n\nclass GlobalSession {\n\n    constructor(){\n\tthis.Layout = {};\n\tthis.Creds = {};\n\tthis.Grids = [];\n\tthis.AppData = {};\n\n\tthis.setDefault()\n\tthis.lsKey = 'gSession'\n\t\n    }\n\n\tgetCreds(){\n\t\treturn this.Creds\n\t}\n    setCreds(u){\n\tconsole.log(\"setting creds to \")\n\tconsole.log(u)\n\tvar c = {\n\t    id : u.id,\n\t    name : u.name\n\t}\n\tthis.Creds = c\n    }\n    \n    getLayout(){\n\t// we should call getLayout at Fish.js, user gets the layout\n\t// when login, first call the babyserver to look for the\n\t// layout detail at mongodb about that user\n\t// to get the fatsize and thin size, and \n\n\treturn this.Layout\n\t// then render the layout to the dashboord => how many grid\n\t// and also the layout name(but not rendering name)\n    }\n\n    setLayout(l){\n\t// call at Fish.js, user may want to update fat/thin size\n\tthis.Layout = l\n\n\t// when setLayout, we reSet the layout grid, or update size of\n\t// each grid\n\n\t// then call babyServer to save to mongodb\n\tthis.save()\n    }\n\n    getGrid(gridID){\n\t// call at FlexGrid, we first call babyserver to get the saved\n\t// object from mongodb about that grid, will pass the\n\t// numCol/numRols, gridcontent detail(what component rendering\n\t// at which place) saved at db to the state\n\n\treturn this.Grids[gridID]\t// rendering at the dashboard\n    }\n\n    setGrid(gridID, gridObject){\n\t\tconsole.log(gridObject)\n\n\t// call at FlexGrid, when update the numsColmn/numsRows or the\n\t// user update the the gridCotnent Detail(changed any\n\t// component name at which key)\n\n\t// set S.Layout.Grids[gridId] = gridObject\t\t// then call babyServer save to mongoDB\n\tthis.Grids[gridID] = gridObject;\n\tthis.save()\n    }\n\n   // component\n    getAppData(gridId, row, col){\n\t// call at GridItem, we call the baby server to find the\n\t//information saved at the gridID, row and col ->\n\t//S.AppData[gridId:row:col] (of type appHash) // set the state\n\t//of that component to what we get from db\n\n\tvar key = gridId + \":\" + row + \":\" + col\n\t// render the setted component\n\treturn this.AppData[key]\n    }\n\t\n\tdestroy(){\n\t    this.Creds = {}\n\t    this.Layout = {}\n\t    this.Grids = []\n\t    this.AppData = {}\n\t    this.setDefault()\n\n\t    var s = this.populate()\n\t    ls.set( this.lsKey, s) // save a default session\n\t}\n\n    setAppData(gridId, row, col, aData){\n\n\t// call at GridItem, when update any information about that\n\t// component, we will call the babyserver talk to mongodb to\n\n\t// update S.AppData[gridId:row:col] = aData\n\n\tvar key = gridId + \":\" + row + \":\" + col\n\tthis.AppData[key] = aData\n\t\n\tthis.save()\n    }\n\t\n    async save(){\n\t// write to database\n\tvar uData = this.populate()\n\tuData.userName = this.Creds.name\n\n\t// make a bS post call\n\tvar data = await bS.post(\"/saveSessionInfo\", uData)\n\n\t// save local as well\n\tls.set(this.lsKey,  uData)\n    }\n\n\n    setDefault(){\n\t\n\tthis.Layout.name = \"ThinRightGrid\"\n\tthis.Layout.conf = {\n\t     fatSize: 8,\n\t     thinSize: 8 \n\t};\n\t\n\t this.Grids[0] = {\n\t     \"numRows\" : 2,\n\t     \"numCols\" : 2,\n\t     \"gridContent\" : {}\n\t }\n\n\t this.Grids[1] = {\n\t     \"numRows\" : 3,\n\t     \"numCols\" : 1,\n\t     \"gridContent\" : {}\n\t }\n    }\n\n    setSession(session){\n\tthis.Layout = session.Layout\n\tthis.Grids = session.Grids\n\tthis.AppData = session.AppData\n    }\n\n    populate(){\n\tvar uData = {\n\t    Creds : this.Creds,\n\t    Layout : this.Layout,\n\t    Grids  : this.Grids,\n\t    AppData : this.AppData\n\t}\n\treturn uData\n    }\n    \n\n    async restore(){\n\t// get from database\n\tvar uData = {\n\t    userName : this.Creds.name\n\t}\n\n\tif (!uData.userName){\n\t    return;\n\t}\n\n\tvar lS  = ls.get(this.lsKey)\n\n\tconsole.log(lS)\n\n\tif ((lS) && (lS.Creds) && (lS.Creds.name == this.Creds.name)){\n\t    console.log(\"got local session back\")\n\t    this.Creds = lS.Creds\n\t    this.setSession(lS)\n\t    return\n\t}\n\n\tconsole.log(\"Restoring from server for \" + this.Creds.name)\n\tvar session = await bS.post(\"/restoreSessionInfo\", uData)\n\tif (session === null || session.Creds == null || !session.Creds.name == this.Creds.name){\n\t    console.log(\"set default called\")\n\t    this.setDefault()\n\t    return\n\t}\n\tthis.setSession(session)\n\n\tconsole.log(\"Received new session  for \" + this.Creds.name)\n\tconsole.log(session)\n\n\t// save it locally\n\tvar uData = this.populate()\n\tuData.userName = this.Creds.name\n\n\tconsole.log(\"saving session locally\")\n\tls.set(this.lsKey,  uData)\n\n    }\n    \n}\n\nexport const gS = new GlobalSession()\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}